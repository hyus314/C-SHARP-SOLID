namespace Logger.Core.IO
{
    using System.Text;

    using Interfaces;
    using Exceptions;
    using Utilities;

    public class LogFile : ILogFile
    {
        private string? name;
        private string? path;
        private readonly StringBuilder content;
        protected int messagesAppended;
        LogFile()
        {
            this.content = new StringBuilder();
        }
        public LogFile(string name, string path)
        : this()
        {
            this.Name = name;
            this.Path = path;
        }

        public string Name
        {
            get
            {
                return this.name!;
            }
            private set
            {
                if (string.IsNullOrWhiteSpace(value))
                {
                    throw new EmptyFileNameException();
                }

                this.name = value;
            }
        }

        public string Path
        {
            get { return path!; }
            private set
            {
                if (!FileValidator.PathExists(value))
                {
                    throw new InvalidPathException();
                }

                path = System.IO.Path.GetFullPath(value);
            }
        }

        public string Content
            => this.content.ToString();
        public int AppendedMessages
            => messagesAppended;
        public int Size { get; private set; }


        public string FullPath
            => System.IO.Path.GetFullPath(this.Path + "/" + this.Name);

        public void Write(string text)
        {
            IncreaseSize(text);
            this.content.Append(text);
            messagesAppended++;
        }

        public void WriteLine(string text)
        {
            IncreaseSize(text);
            this.content.AppendLine(text);
            messagesAppended++;
        }

        public void SaveContent()
        {
            string previousContent = File.ReadAllText(this.Path);
            string futureContent = previousContent + Environment.NewLine
                + this.Content;
            File.WriteAllText(this.Path, futureContent);
            this.content.Clear();
        }
        private void IncreaseSize(string text)
        {
            foreach (char letter in text.Where(c => char.IsLetter(c)))
            {
                Size += (int)letter;
            }
        }
    }
}
